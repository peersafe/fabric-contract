/*
 * Copyright (C) 2020 The poly network Authors
 * This file is part of The poly network library.
 *
 * The  poly network  is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * The  poly network  is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 * You should have received a copy of the GNU Lesser General Public License
 * along with The poly network .  If not, see <http://www.gnu.org/licenses/>.
 */
package utils

import (
	"encoding/hex"
	"fmt"
	"github.com/golang/protobuf/ptypes/timestamp"
	"github.com/hyperledger/fabric/core/chaincode/shim"
	pb "github.com/hyperledger/fabric/protos/peer"
)

type CCStubMock struct {
	Mem  map[string][]byte
	Args [][]byte
	CA   string
}

func (mock *CCStubMock) GetArgs() [][]byte {
	return mock.Args
}

func (mock *CCStubMock) GetStringArgs() []string {
	args := mock.GetArgs()
	strargs := make([]string, 0, len(args))
	for _, barg := range args {
		strargs = append(strargs, string(barg))
	}
	return strargs
}

func (mock *CCStubMock) GetFunctionAndParameters() (string, []string) {
	return "", nil
}

func (mock *CCStubMock) GetArgsSlice() ([]byte, error) {
	return nil, nil
}

func (mock *CCStubMock) GetTxID() string {
	return ""
}

func (mock *CCStubMock) GetChannelID() string {
	return "1"
}

func (mock *CCStubMock) InvokeChaincode(chaincodeName string, args [][]byte, channel string) pb.Response {
	for _, v := range args {
		fmt.Println(string(v))
	}
	return shim.Success(nil)
}

func (mock *CCStubMock) GetState(key string) ([]byte, error) {
	return mock.Mem[key], nil
}

func (mock *CCStubMock) PutState(key string, value []byte) error {
	mock.Mem[key] = value
	return nil
}

func (mock *CCStubMock) DelState(key string) error {
	delete(mock.Mem, key)
	return nil
}

func (mock *CCStubMock) SetStateValidationParameter(key string, ep []byte) error {
	return nil
}

func (mock *CCStubMock) GetStateValidationParameter(key string) ([]byte, error) {
	return nil, nil
}

func (mock *CCStubMock) GetStateByRange(startKey, endKey string) (shim.StateQueryIteratorInterface, error) {
	return nil, nil
}

func (mock *CCStubMock) GetStateByRangeWithPagination(startKey, endKey string, pageSize int32, bookmark string) (shim.StateQueryIteratorInterface, *pb.QueryResponseMetadata, error) {
	return nil, &pb.QueryResponseMetadata{}, nil
}

func (mock *CCStubMock) GetStateByPartialCompositeKey(objectType string, keys []string) (shim.StateQueryIteratorInterface, error) {
	return nil, nil
}

func (mock *CCStubMock) GetStateByPartialCompositeKeyWithPagination(objectType string, keys []string,
	pageSize int32, bookmark string) (shim.StateQueryIteratorInterface, *pb.QueryResponseMetadata, error) {
	return nil, &pb.QueryResponseMetadata{}, nil
}

func (mock *CCStubMock) CreateCompositeKey(objectType string, attributes []string) (string, error) {
	return "", nil
}

func (mock *CCStubMock) SplitCompositeKey(compositeKey string) (string, []string, error) {
	return "", nil, nil
}

func (mock *CCStubMock) GetQueryResult(query string) (shim.StateQueryIteratorInterface, error) {
	return nil, nil
}

func (mock *CCStubMock) GetQueryResultWithPagination(query string, pageSize int32, bookmark string) (shim.StateQueryIteratorInterface, *pb.QueryResponseMetadata, error) {
	return nil, &pb.QueryResponseMetadata{}, nil
}

func (mock *CCStubMock) GetHistoryForKey(key string) (shim.HistoryQueryIteratorInterface, error) {
	return nil, nil
}

func (mock *CCStubMock) GetPrivateData(collection, key string) ([]byte, error) {
	return nil, nil
}

func (mock *CCStubMock) GetPrivateDataHash(collection, key string) ([]byte, error) {
	return nil, nil
}

func (mock *CCStubMock) PutPrivateData(collection string, key string, value []byte) error {
	return nil
}

func (mock *CCStubMock) DelPrivateData(collection, key string) error {
	return nil
}

func (mock *CCStubMock) SetPrivateDataValidationParameter(collection, key string, ep []byte) error {
	return nil
}

func (mock *CCStubMock) GetPrivateDataValidationParameter(collection, key string) ([]byte, error) {
	return nil, nil
}

func (mock *CCStubMock) GetPrivateDataByRange(collection, startKey, endKey string) (shim.StateQueryIteratorInterface, error) {
	return nil, nil
}

func (mock *CCStubMock) GetPrivateDataByPartialCompositeKey(collection, objectType string, keys []string) (shim.StateQueryIteratorInterface, error) {
	return nil, nil
}

func (mock *CCStubMock) GetPrivateDataQueryResult(collection, query string) (shim.StateQueryIteratorInterface, error) {
	return nil, nil
}

func (mock *CCStubMock) GetCreator() ([]byte, error) {
	return []byte(mock.CA), nil
}

func (mock *CCStubMock) GetTransient() (map[string][]byte, error) {
	return nil, nil
}

func (mock *CCStubMock) GetBinding() ([]byte, error) {
	return nil, nil
}

func (mock *CCStubMock) GetDecorations() map[string][]byte {
	return nil
}

func (mock *CCStubMock) GetSignedProposal() (*pb.SignedProposal, error) {
	raw, _ := hex.DecodeString("0abf070a6708031a0c089bae84fd0510b3bfcdd40222096d796368616e6e656c2a40333165393038313164303232313566303833323964373331303638363235636561356564373538643664623337313131646639343264366332636163636337303a081206120463636d3112d3060ab6060a074f7267314d535012aa062d2d2d2d2d424547494e2043455254494649434154452d2d2d2d2d0a4d4949434b6a4343416443674177494241674952414c3977693432436763676f6379426a2b347a2f73744d77436759494b6f5a497a6a304541774977637a454c0a4d416b474131554542684d4356564d78457a415242674e5642416754436b4e6862476c6d62334a7561574578466a415542674e564241635444564e68626942470a636d467559326c7a593238784754415842674e5642416f54454739795a7a45755a586868625842735a53356a623230784844416142674e5642414d5445324e680a4c6d39795a7a45755a586868625842735a53356a623230774868634e4d6a41784d444d784d4449304e7a41775768634e4d7a41784d4449354d4449304e7a41770a576a42724d517377435159445651514745774a56557a45544d4245474131554543424d4b5132467361575a76636d3570595445574d4251474131554542784d4e0a5532467549455a795957356a61584e6a627a454f4d4177474131554543784d465957527461573478487a416442674e5642414d4d466b466b62576c75514739790a5a7a45755a586868625842735a53356a623230775754415442676371686b6a4f5051494242676771686b6a4f50514d4242774e4341415236774e6e7a503230370a7447423679426b5535643255344c63694a51384943334b504f776838667959724671716d485241634c6851374875753476797a793147726b7377476d444c6f620a334144684e2b576a695a4c4d6f303077537a414f42674e56485138424166384542414d434234417744415944565230544151482f424149774144417242674e560a48534d454a44416967434351366a4643535262696d6950676c704952337a68484e354452536e3869304f786564464d666b6a7036477a414b42676771686b6a4f0a5051514441674e49414442464169454136387036346c586559617a32624235557132776b3469435149787847485578654f5236557a6178645a56734349454e370a3446744a393566344e4d3963736b395233305a73526c566a747a2b564764424b79754632676a4b510a2d2d2d2d2d454e442043455254494649434154452d2d2d2d2d0a1218a4e4b47935810a9a46d6161445732c6f3b09eece57518b0a12cb0f0ac80f0ac50f1206120463636d311aba0f0a18766572696679486561646572416e644578656375746554780aaaf60ba000a00")
	return &pb.SignedProposal{
		ProposalBytes: raw,
	}, nil
}

func (mock *CCStubMock) GetTxTimestamp() (*timestamp.Timestamp, error) {
	return &timestamp.Timestamp{}, nil
}

func (mock *CCStubMock) SetEvent(name string, payload []byte) error {
	return nil
}

func (mock *CCStubMock) SetNewCA(ca string) {
	mock.CA = ca
}
