/*
 * Copyright (C) 2020 The poly network Authors
 * This file is part of The poly network library.
 *
 * The  poly network  is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * The  poly network  is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 * You should have received a copy of the GNU Lesser General Public License
 * along with The poly network .  If not, see <http://www.gnu.org/licenses/>.
 */
package assets

import (
	"bytes"
	"encoding/hex"
	"fmt"
	"github.com/golang/protobuf/proto"
	"github.com/hyperledger/fabric/core/chaincode/shim"
	"github.com/hyperledger/fabric/protos/peer"
	utils2 "github.com/hyperledger/fabric/protos/utils"
	"github.com/polynetwork/fabric-contract/utils"
	"github.com/stretchr/testify/assert"
	"math/big"
	"testing"
)

var (
	hdr0     = "00000000db056dd100000000000000000000000000000000000000000000000000000000000000000000000031398296a7e89188e0e99c6f46979470a8e59e5ca225181c13d003947fe0ea5a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008e305f000000001dac2b7c00000000fdb2037b226c6561646572223a343239343936373239352c227672665f76616c7565223a22484a675171706769355248566745716354626e6443456c384d516837446172364e4e646f6f79553051666f67555634764d50675851524171384d6f38373853426a2b38577262676c2b36714d7258686b667a72375751343d222c227672665f70726f6f66223a22785864422b5451454c4c6a59734965305378596474572f442f39542f746e5854624e436667354e62364650596370382f55706a524c572f536a5558643552576b75646632646f4c5267727052474b76305566385a69413d3d222c226c6173745f636f6e6669675f626c6f636b5f6e756d223a343239343936373239352c226e65775f636861696e5f636f6e666967223a7b2276657273696f6e223a312c2276696577223a312c226e223a342c2263223a312c22626c6f636b5f6d73675f64656c6179223a31303030303030303030302c22686173685f6d73675f64656c6179223a31303030303030303030302c22706565725f68616e647368616b655f74696d656f7574223a31303030303030303030302c227065657273223a5b7b22696e646578223a312c226964223a2231323035303238313732393138353430623262353132656165313837326132613265336132386439383963363064393564616238383239616461376437646437303664363538227d2c7b22696e646578223a322c226964223a2231323035303338623861663632313065636664636263616232323535326566386438636634316336663836663963663961623533643836353734316366646238333366303662227d2c7b22696e646578223a332c226964223a2231323035303234383261636236353634623139623930363533663665396338303632393265386161383366373865376139333832613234613665666534316330633036663339227d2c7b22696e646578223a342c226964223a2231323035303236373939333061343261616633633639373938636138613366313265313334633031393430353831386437383364313137343865303339646538353135393838227d5d2c22706f735f7461626c65223a5b332c322c342c312c332c342c322c312c322c312c322c342c332c332c322c322c342c342c312c342c332c342c342c332c342c342c322c322c342c312c322c312c332c312c322c332c312c312c312c332c312c332c322c322c312c332c342c342c322c342c332c332c342c322c312c322c332c312c332c315d2c226d61785f626c6f636b5f6368616e67655f76696577223a36303030307d7d76776c36a8c30384672529690f733d95a58bbd940000"
	hdr60000 = "00000000db056dd100000000dad99a868e4bdb051a703b8992c6b2c1455d9e25bd3c3472ef85a8bc7c1a07d4bf67d4747270d9aadd54903398c155c9f6be7c9881d7bfe78ad096ccafbec5730000000000000000000000000000000000000000000000000000000000000000acb6a5aedc6498960e44ca226263a97f35da2187147407e1b639c99024f3dca379657c5f60ea00007df65806481c9877fda4037b226c6561646572223a342c227672665f76616c7565223a22424371676b554f2b4670505041617a7756645550745376794457704c34304d534f3753346e4147326d59384947364565596c4772334b3970434d662b65765a4f6654694a66636a3530314131316b7a446c686139322b593d222c227672665f70726f6f66223a22322f516954516e376350555868496e63416a63684c6d59484e6363754b3739397944443456717234465264425049616f39754d6f744962332f47463448445042643543466b2f6434456f78426f627232697337574b413d3d222c226c6173745f636f6e6669675f626c6f636b5f6e756d223a36303030302c226e65775f636861696e5f636f6e666967223a7b2276657273696f6e223a312c2276696577223a322c226e223a342c2263223a312c22626c6f636b5f6d73675f64656c6179223a31303030303030303030302c22686173685f6d73675f64656c6179223a31303030303030303030302c22706565725f68616e647368616b655f74696d656f7574223a31303030303030303030302c227065657273223a5b7b22696e646578223a332c226964223a2231323035303234383261636236353634623139623930363533663665396338303632393265386161383366373865376139333832613234613665666534316330633036663339227d2c7b22696e646578223a322c226964223a2231323035303338623861663632313065636664636263616232323535326566386438636634316336663836663963663961623533643836353734316366646238333366303662227d2c7b22696e646578223a312c226964223a2231323035303238313732393138353430623262353132656165313837326132613265336132386439383963363064393564616238383239616461376437646437303664363538227d2c7b22696e646578223a342c226964223a2231323035303236373939333061343261616633633639373938636138613366313265313334633031393430353831386437383364313137343865303339646538353135393838227d5d2c22706f735f7461626c65223a5b332c322c332c332c322c322c342c312c342c312c312c342c312c332c312c312c342c322c322c322c332c342c332c342c322c342c322c342c342c342c342c332c322c332c342c322c342c332c332c322c312c312c322c342c312c332c312c312c332c322c332c312c322c332c312c312c342c312c332c325d2c226d61785f626c6f636b5f6368616e67655f76696577223a36303030307d7d76776c36a8c30384672529690f733d95a58bbd940323120502679930a42aaf3c69798ca8a3f12e134c019405818d783d11748e039de8515988231205028172918540b2b512eae1872a2a2e3a28d989c60d95dab8829ada7d7dd706d65823120502482acb6564b19b90653f6e9c806292e8aa83f78e7a9382a24a6efe41c0c06f390342011c2eefad8c4c77e3e431cc2fb3cc51a8109b67f449a4861a9725b3a321a035928a5ed6e9d15c02db4aef61afb2aa0b058e88367ef9debec020f15d5fe2f40ba52242011c1410f37cf9dd5aece1da6fca5f4285e234828ac100e69d1631e6e7cc742fe8951281ced9fc6efe4fc7aae5b1d52336de9fd533d5b4357e745f1703352f01bd8a42011bea7b76bd6afd197732a1ab08dd7ef9be8e7adbe83e42d8369639b926ec29ca4b3844cd13dd7e39ec307c9f6a16f3ff5447a8c7f9677e14a00f0494af56342e9c"

	hdr1   = "00000000db056dd100000000244bb1b9a01a2b4fd3fe6601b2d046b6cf695ba474cd0fe95f2cf4bd8108488e0000000000000000000000000000000000000000000000000000000000000000302b67ceb77b47c6b635ac3082894538b693e972568eae5c8733a29b90fe3bc6db80df9bddff8dc9f322ee7499c5744a47bf91913087d4cfdff1ab0106dd1608a08e865fb09b0100ad86f58eaf57f903fd10017b226c6561646572223a312c227672665f76616c7565223a224246724358307254384d7753536f6a6d5375585943754258796b686946303046776d653258726d565274695a5a386b674c356a3642324b703245534b64445871596c45634865462b33667347314c73724439736a70596b3d222c227672665f70726f6f66223a22724b635264306171796d333634305033462b6e36462f5447487a677745672b55473948772b666756623743717a504d6d7268715453696e6b4d4b4c51776d492b494f72496f52784e446a6176624d642f752b716464773d3d222c226c6173745f636f6e6669675f626c6f636b5f6e756d223a36303030302c226e65775f636861696e5f636f6e666967223a6e756c6c7d000000000000000000000000000000000000000004231205028172918540b2b512eae1872a2a2e3a28d989c60d95dab8829ada7d7dd706d658231205038b8af6210ecfdcbcab22552ef8d8cf41c6f86f9cf9ab53d865741cfdb833f06b23120502679930a42aaf3c69798ca8a3f12e134c019405818d783d11748e039de851598823120502482acb6564b19b90653f6e9c806292e8aa83f78e7a9382a24a6efe41c0c06f390442011c4a549789967cc766bb9a60b2faae947bec19ee2e2d84845638789a3258586dc461d451d63b9a6afc29a436d5d4204eb695e2f800a9b3e59dc41677b240932d7742011bf808cf0daa407d3bef5889ac0a5071d7d1bde99a861a4e663dc82948a38279174446d7c18bafccb94274cafccad4e9530fce78d43a2f4fe06f977233de58b1ff42011b0c7c1bc4cc2eed0427a227dc74f6bd3264e16b6b5b9cbffb8ffd2f892266b1ff5ef9ab73533c0d8d9b6bf99ba04edd2d173163786dfc772fbb15ae9ddedc80fb42011c09d821760428588be4ecaabf99d66846577dc662240268354879de98a1e3a75216491e4c926b11ee68fbbca7844722f9ec618e70082b3bbe5906b55a974ed317"
	proof1 = "ef20fb6cc83379d4775fd8cbceaf824e8dc02f69e19c142f315580df7e2dcd24256b0200000000000000200000000000000000000000000000000000000000000000000000000000000001200bef4274080e792fd43427d5e3231b10179514455eee4a14fdbe9d2caba60600142eea349947f93c3b9b74fbcf141e102add510ece0600000000000000145411cbe06a0895d044670c5ab256bec76ae40c7c06756e6c6f636b4a14cc85571cd21ea6f66bbfb78121e2d2aa153031fb1434f00110bad3236f01468799d44fe04d7deb25f000e8764817000000000000000000000000000000000000000000000000000000"

	rootCA = `DEFAULTÂº-----BEGIN CERTIFICATE-----
MIICNjCCAd2gAwIBAgIRAMnf9/dmV9RvCCVw9pZQUfUwCgYIKoZIzj0EAwIwgYEx
CzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQHEw1TYW4g
RnJhbmNpc2NvMRkwFwYDVQQKExBvcmcxLmV4YW1wbGUuY29tMQwwCgYDVQQLEwND
T1AxHDAaBgNVBAMTE2NhLm9yZzEuZXhhbXBsZS5jb20wHhcNMTcxMTEyMTM0MTEx
WhcNMjcxMTEwMTM0MTExWjBpMQswCQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZv
cm5pYTEWMBQGA1UEBxMNU2FuIEZyYW5jaXNjbzEMMAoGA1UECxMDQ09QMR8wHQYD
VQQDExZwZWVyMC5vcmcxLmV4YW1wbGUuY29tMFkwEwYHKoZIzj0CAQYIKoZIzj0D
AQcDQgAEZ8S4V71OBJpyMIVZdwYdFXAckItrpvSrCf0HQg40WW9XSoOOO76I+Umf
EkmTlIJXP7/AyRRSRU38oI8Ivtu4M6NNMEswDgYDVR0PAQH/BAQDAgeAMAwGA1Ud
EwEB/wQCMAAwKwYDVR0jBCQwIoAginORIhnPEFZUhXm6eWBkm7K7Zc8R4/z7LW4H
ossDlCswCgYIKoZIzj0EAwIDRwAwRAIgVikIUZzgfuFsGLQHWJUVJCU7pDaETkaz
PzFgsCiLxUACICgzJYlW7nvZxP7b6tbeu3t8mrhMXQs956mD4+BoKuNI
-----END CERTIFICATE-----`

	newCA = `-----BEGIN CERTIFICATE-----
MIICHjCCAcWgAwIBAgIRAKU15UAdRc3gZQuCCdYE2SIwCgYIKoZIzj0EAwIwaTEL
MAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDVNhbiBG
cmFuY2lzY28xFDASBgNVBAoTC2V4YW1wbGUuY29tMRcwFQYDVQQDEw5jYS5leGFt
cGxlLmNvbTAeFw0yMDEwMDkwMjQ5MDBaFw0zMDEwMDcwMjQ5MDBaMGoxCzAJBgNV
BAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQHEw1TYW4gRnJhbmNp
c2NvMRAwDgYDVQQLEwdvcmRlcmVyMRwwGgYDVQQDExNvcmRlcmVyLmV4YW1wbGUu
Y29tMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEA67IcH48n8fpLoT9MjyDT6Qh
QZqGe5KXHG9sqHJdIbJoYpnHMxkletVrqI35Y6sgp4w9Sy+8jTvReHc1+fchwKNN
MEswDgYDVR0PAQH/BAQDAgeAMAwGA1UdEwEB/wQCMAAwKwYDVR0jBCQwIoAgfi+u
kqWiPFOtT8mCFDWk2Rbl5JDHW1dwJRmcEyihyqkwCgYIKoZIzj0EAwIDRwAwRAIg
HNzfr04Jzi4J/p1UZn1U14JM8S6ym65/BxmH9uqepM8CIA5/tfv6aZ53PpOVYsrs
zQW7eQxTo228awU1AIwsA95+
-----END CERTIFICATE-----`

	addr1 = "ea3b6cd29a71347b7288238d5ddfba6509f41eca"
	addr2 = "c5e917dc100b256f6f7150812b72ad60cbd50d53"
)

func prepareEnv(isLp string) (*ERC20TokenImpl, *utils.CCStubMock) {
	impl := &ERC20TokenImpl{}
	mock := &utils.CCStubMock{
		CA: rootCA,
	}
	mock.Mem = make(map[string][]byte)
	mock.Args = [][]byte{
		[]byte("polyEth"),
		[]byte("pEth"),
		[]byte("18"),
		[]byte("1000000000000000000000000000"),
		[]byte("test"),
		[]byte(isLp),
	}
	resp := impl.Init(mock)
	if resp.Status != shim.OK {
		fmt.Println(resp.GetMessage())
	}

	return impl, mock
}

func TestERC20TokenImpl_name(t *testing.T) {
	impl, mock := prepareEnv("false")
	resp := impl.name(mock)
	assert.Equal(t, true, shim.OK == resp.Status, "wrong result")
	assert.Equal(t, []byte("polyEth"), resp.Payload)
}

func TestERC20TokenImpl_decimal(t *testing.T) {
	impl, mock := prepareEnv("false")
	resp := impl.decimal(mock)

	assert.Equal(t, true, shim.OK == resp.Status, "wrong result")
	assert.Equal(t, big.NewInt(18).Bytes(), resp.Payload)
}

func TestERC20TokenImpl_balanceOf(t *testing.T) {
	impl, mock := prepareEnv("false")
	mock.Args = [][]byte{
		[]byte(addr1),
	}
	resp := impl.balanceOf(mock, mock.GetArgs())
	ts, _ := big.NewInt(0).SetString("1000000000000000000000000000", 10)

	assert.Equal(t, true, shim.OK == resp.Status, "wrong result")
	assert.Equal(t, ts.Bytes(), resp.Payload)
}

func TestERC20TokenImpl_mint(t *testing.T) {
	impl, mock := prepareEnv("false")
	mock.Args = [][]byte{
		[]byte(addr2),
		[]byte("10000"),
	}
	resp := impl.mint(mock, mock.GetArgs())
	amt, _ := big.NewInt(0).SetString("10000", 10)

	assert.Equal(t, true, shim.OK == resp.Status, "wrong result")

	resp = impl.balanceOf(mock, [][]byte{
		[]byte(addr2),
	})
	assert.Equal(t, amt.Bytes(), resp.Payload)

	resp = impl.totalSupply(mock)
	ts, _ := big.NewInt(0).SetString("1000000000000000000000000000", 10)
	assert.Equal(t, ts.Add(ts, amt).Bytes(), resp.Payload)
}

func TestERC20TokenImpl_transfer(t *testing.T) {
	impl, mock := prepareEnv("false")
	mock.Args = [][]byte{
		[]byte(addr2),
		[]byte("10000"),
	}
	resp := impl.transfer(mock, mock.GetArgs())
	amt, _ := big.NewInt(0).SetString("10000", 10)

	assert.Equal(t, true, shim.OK == resp.Status, "wrong result")

	resp = impl.balanceOf(mock, [][]byte{
		[]byte(addr2),
	})
	assert.Equal(t, amt.Bytes(), resp.Payload)

	resp = impl.balanceOf(mock, [][]byte{
		[]byte(addr1),
	})
	ts, _ := big.NewInt(0).SetString("1000000000000000000000000000", 10)
	assert.Equal(t, ts.Sub(ts, amt).Bytes(), resp.Payload)
}

func TestERC20TokenImpl_approve(t *testing.T) {
	impl, mock := prepareEnv("false")
	mock.Args = [][]byte{
		[]byte(addr2),
		[]byte("10000"),
	}
	resp := impl.approve(mock, mock.GetArgs())
	assert.Equal(t, true, shim.OK == resp.Status, "wrong result")

	resp = impl.allowance(mock, [][]byte{
		[]byte(addr1),
		[]byte(addr2),
	})
	assert.Equal(t, true, shim.OK == resp.Status, "wrong result")
	assert.Equal(t, big.NewInt(10000).Bytes(), resp.Payload)

	mock.SetNewCA(newCA)
	resp = impl.transferFrom(mock, [][]byte{
		[]byte(addr1),
		[]byte(addr2),
		[]byte("10000"),
	})
	assert.Equal(t, true, shim.OK == resp.Status, "wrong result")

	resp = impl.balanceOf(mock, [][]byte{
		[]byte(addr2),
	})
	assert.Equal(t, big.NewInt(10000).Bytes(), resp.Payload)
}

func TestERC20TokenImpl_decreaseAllowance(t *testing.T) {
	impl, mock := prepareEnv("false")
	mock.Args = [][]byte{
		[]byte(addr2),
		[]byte("10000"),
	}
	resp := impl.approve(mock, mock.GetArgs())
	assert.Equal(t, true, shim.OK == resp.Status, "wrong result")

	resp = impl.decreaseAllowance(mock, [][]byte{
		[]byte(addr2),
		[]byte("1000"),
	})
	assert.Equal(t, true, shim.OK == resp.Status, "wrong result")

	resp = impl.allowance(mock, [][]byte{
		[]byte(addr1),
		[]byte(addr2),
	})
	assert.Equal(t, true, shim.OK == resp.Status, "wrong result")
	assert.Equal(t, big.NewInt(9000).Bytes(), resp.Payload)
}

func TestERC20TokenImpl_burn(t *testing.T) {
	impl, mock := prepareEnv("false")
	mock.Args = [][]byte{
		[]byte("10000"),
	}
	resp := impl.burn(mock, mock.GetArgs())
	assert.Equal(t, true, shim.OK == resp.Status, "wrong result")

	resp = impl.balanceOf(mock, [][]byte{
		[]byte(addr1),
	})
	assert.Equal(t, true, shim.OK == resp.Status, "wrong result")
	assert.Equal(t, big.NewInt(9000).Bytes(), resp.Payload)
}

//func TestERC20TokenImpl_bindProxyHash(t *testing.T) {
//	impl, mock := prepareEnv("true")
//	mock.Args = [][]byte{
//		[]byte("2"),
//		[]byte(addr1),
//	}
//	resp := impl.bindProxyHash(mock, mock.GetArgs())
//	assert.Equal(t, true, shim.OK == resp.Status, "wrong result")
//
//	resp = impl.getProxyHash(mock, [][]byte{
//		[]byte("2"),
//	})
//	raw, _ := hex.DecodeString(addr1)
//	assert.Equal(t, true, shim.OK == resp.Status, "wrong result")
//	assert.Equal(t, raw, resp.Payload)
//}
//
//func TestERC20TokenImpl_bindAssetHash(t *testing.T) {
//	impl, mock := prepareEnv("true")
//	mock.Args = [][]byte{
//		[]byte("2"),
//		[]byte(addr1),
//	}
//
//	resp := impl.bindAssetHash(mock, mock.GetArgs())
//	assert.Equal(t, true, shim.OK == resp.Status, "wrong result")
//
//	resp = impl.getAssetHash(mock, [][]byte{
//		[]byte("2"),
//	})
//	raw, _ := hex.DecodeString(addr1)
//	assert.Equal(t, true, shim.OK == resp.Status, "wrong result")
//	assert.Equal(t, raw, resp.Payload)
//}
//
//func TestERC20TokenImpl_lock(t *testing.T) {
//	impl, mock := prepareEnv("true")
//	mock.Args = [][]byte{
//		[]byte("ccm"),
//	}
//	resp := impl.setManager(mock, mock.GetArgs())
//	mock.Args = [][]byte{
//		[]byte("2"),
//		[]byte(addr1),
//	}
//	resp = impl.bindAssetHash(mock, mock.GetArgs())
//	mock.Args = [][]byte{
//		[]byte("2"),
//		[]byte(addr1),
//	}
//	resp = impl.bindProxyHash(mock, mock.GetArgs())
//
//	to, _ := hex.DecodeString(addr1)
//	resp = impl.getLockProxyAddr(mock)
//	amt := big.NewInt(1000)
//	impl.transferLogic(mock, resp.Payload, to, amt)
//
//	mock.Args = [][]byte{
//		[]byte("2"),
//		[]byte(addr1),
//		[]byte(amt.String()),
//	}
//	resp = impl.lock(mock, mock.GetArgs())
//	assert.Equal(t, true, shim.OK == resp.Status, "wrong result")
//}
//
//func TestERC20TokenImpl_unlock(t *testing.T) {
//	impl, mock := prepareEnv("true")
//	mock.Args = [][]byte{
//		[]byte("ccm1"),
//	}
//	resp := impl.setManager(mock, mock.GetArgs())
//
//	mock.Args = [][]byte{
//		[]byte("0470657468149b5826263c1e499cfc4c12db8ee98ac1f7584117e803000000000000000000000000000000000000000000000000000000000000"),
//	}
//	resp = impl.unlock(mock, mock.GetArgs())
//	assert.Equal(t, true, shim.OK == resp.Status, "wrong result")
//}

func TestERC20TokenImpl_Init(t *testing.T) {
	fmt.Println(hex.EncodeToString([]byte("\237kSj\351\361\372\r\005c\344\333\372\370\250\354\357\032<\027")))
	fmt.Println("lp", hex.EncodeToString([]byte("\002Z\010x\370\274T6\377SJQ\371\257\332c\360\270R\217")))
	fmt.Println("my", hex.EncodeToString([]byte("~\020\270\350\007\2155(wi\220\332x_1v\232\325\323m")))
	raw, _ := hex.DecodeString("70657468")
	fmt.Println(string(raw))
	fmt.Println("eth:", hex.EncodeToString([]byte("peth3")))
	fmt.Println("lp:", hex.EncodeToString([]byte("lockproxy3")))
	fmt.Println(hex.EncodeToString([]byte("'\020")))
	a := big.NewInt(0).SetBytes([]byte("BEc"))
	b := big.NewInt(0).SetBytes([]byte("\003;.<\237\320\200<\347\275\272\235"))
	fmt.Println("amt:", a.String())
	fmt.Println("amt:", b.String())
	fmt.Println("sum:", a.Add(a, b).String())

	raw, _ = hex.DecodeString("0abf070a6708031a0c089bae84fd0510b3bfcdd40222096d796368616e6e656c2a40333165393038313164303232313566303833323964373331303638363235636561356564373538643664623337313131646639343264366332636163636337303a081206120463636d3112d3060ab6060a074f7267314d535012aa062d2d2d2d2d424547494e2043455254494649434154452d2d2d2d2d0a4d4949434b6a4343416443674177494241674952414c3977693432436763676f6379426a2b347a2f73744d77436759494b6f5a497a6a304541774977637a454c0a4d416b474131554542684d4356564d78457a415242674e5642416754436b4e6862476c6d62334a7561574578466a415542674e564241635444564e68626942470a636d467559326c7a593238784754415842674e5642416f54454739795a7a45755a586868625842735a53356a623230784844416142674e5642414d5445324e680a4c6d39795a7a45755a586868625842735a53356a623230774868634e4d6a41784d444d784d4449304e7a41775768634e4d7a41784d4449354d4449304e7a41770a576a42724d517377435159445651514745774a56557a45544d4245474131554543424d4b5132467361575a76636d3570595445574d4251474131554542784d4e0a5532467549455a795957356a61584e6a627a454f4d4177474131554543784d465957527461573478487a416442674e5642414d4d466b466b62576c75514739790a5a7a45755a586868625842735a53356a623230775754415442676371686b6a4f5051494242676771686b6a4f50514d4242774e4341415236774e6e7a503230370a7447423679426b5535643255344c63694a51384943334b504f776838667959724671716d485241634c6851374875753476797a793147726b7377476d444c6f620a334144684e2b576a695a4c4d6f303077537a414f42674e56485138424166384542414d434234417744415944565230544151482f424149774144417242674e560a48534d454a44416967434351366a4643535262696d6950676c704952337a68484e354452536e3869304f786564464d666b6a7036477a414b42676771686b6a4f0a5051514441674e49414442464169454136387036346c586559617a32624235557132776b3469435149787847485578654f5236557a6178645a56734349454e370a3446744a393566344e4d3963736b395233305a73526c566a747a2b564764424b79754632676a4b510a2d2d2d2d2d454e442043455254494649434154452d2d2d2d2d0a1218a4e4b47935810a9a46d6161445732c6f3b09eece57518b0a12cb0f0ac80f0ac50f1206120463636d311aba0f0a18766572696679486561646572416e644578656375746554780aa00363663230346662363361383433613232333833333836373062653134353332646138323863336233643663626438613832616433366433343236343463623235323230373032303030303030303030303030303032303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030383632306534353239373738376539393865316236326433623231343530363534333134666239663930616333623461656632333665313432616362646236326336303431343265656133343939343766393363336239623734666263663134316531303261646435313065636530373030303030303030303030303030303437303635373436383036373536653663366636333662336130343730363537343638313439613432306137653537653630373036666666363961653930313132656365633336393966313164383039363938303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030300af60ba000a00")
	p, err := utils2.GetProposal(raw)
	if err != nil {
		t.Fatal(err)
	}
	//cpp, err := utils2.GetChaincodeProposalPayload(p.Payload)
	//if err != nil {
	//	t.Fatal(err)
	//}
	//cpp.Input
	spec, err := utils2.GetChaincodeInvocationSpec(p)
	if err != nil {
		t.Fatal(err)
	}

	fmt.Println(spec.ChaincodeSpec.ChaincodeId.Name)

	for i, v := range spec.ChaincodeSpec.Input.Args {
		logger.Infof("original %d: %s", i, hex.EncodeToString(v))
	}

	raw, _ = hex.DecodeString("a620ceb0c6d229def7d25421deb341d1a9d429abb8363e3a771a7989b2b431dad9ae060000000000000020000000000000000000000000000000000000000000000000000000000000004d20f3efe3549f6f902c2595676eb8c00c43d8066c754ea0876c2b5f76c83272ca381469d0ba0866ee3d9abd19b06ad8ac6f49023e19b8080000000000000016050341a2c2c7ace8df73838591284da26b1a9771fff804686561720148012b2d92fa85b0d94331dda6d1ff508fa8d5a60fe69545c07f2d335ef802cadd21")
	res, _ := GetWhatCCMCalling(raw)

	fmt.Println(res)

	raw, err = proto.Marshal(&peer.ChaincodeSpec{ChaincodeId: &peer.ChaincodeID{Name: res}, Input: &peer.ChaincodeInput{Args: [][]byte{}}})
	if err != nil {
		t.Fatal(err)
	}

	aa, ok := big.NewInt(0).SetString("0x150139183955f36ebacd", 0)
	if !ok {
		t.Fatal(ok)
	}
	bb, ok := big.NewInt(0).SetString("0x150139183955f3cffb92", 0)
	if !ok {
		t.Fatal(ok)
	}
	fmt.Println(bb.Sub(bb, aa).String())

	aaa := 1
	for ; ; aaa++ {
		break
	}

	//n, err := strconv.ParseUint(strings.TrimPrefix(string(raw), "0x"), 16, 64)
	//if err != nil {
	//	t.Fatal(err)
	//}

	n := big.NewInt(0).SetBytes(bytes.TrimPrefix([]byte("0x38aa"), []byte("0x"))).Uint64()
	fmt.Println(n)

	aa = big.NewInt(1)
	bb = big.NewInt(1)
	aa.Add(aa, bb)

	fmt.Println(aa.String())
}
